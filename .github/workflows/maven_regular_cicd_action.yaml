name: maven_regular_cicd_action
on:
  workflow_call:
    inputs:
      workload_identity_provider:
        type: string
      service_account:
        type: string
      cluster_name:
        type: string
      cluster_location:
        type: string
      pr_number:
        type: string
        required: true
      ref:
        type: string

    #   BOT_USER:
    #     type: string
    #   PR_NUMBER:
    #     type: string
    # secrets:
    #   GITTOKEN:
    #     description: "Git token"
    #     required: true
    outputs:
      image_name:
        value: ${{ jobs.pr_pipeline.outputs.image_name }}
      image_tag: 
        value: ${{ jobs.pr_pipeline.outputs.image_tag }}

env:
  GIT_AUTHOR_NAME: ${{ inputs.BOT_USER }}
  PULL_BASE_REF: ${{ github.base_ref }}
  PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  PULL_PULL_REF: refs/pull/${{ github.event.pull_request.number }}/head
  PULL_PULL_SHA: ${{ github.event.pull_request.head.sha }}
  PULL_REFS: ${{ github.base_ref }}:${{ github.event.pull_request.base.sha }},${{ github.event.pull_request.number }}:${{ github.event.pull_request.head.sha }}:refs/pull/${{ github.event.pull_request.number }}/head
  JOB_NAME: "verify"
  JOB_SPEC: "type:presubmit"
  JOB_TYPE: "presubmit"
  REPO_NAME: ${{ github.event.repository.name }}
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_URL: https://github.com/${{ github.repository }}.git
  JX_KUBERNETES: true
  SOURCE_DIR: "${{ github.workspace }}/source"
  OCI_REGISTRY: "oci://us-docker.pkg.dev/prodoscore-artifactory/charts/"
  REGISTRIES: "us-docker.pkg.dev"
  REPOSITORY: "prodoscore-artifactory"

jobs:
  process-comment:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/')
    
    steps:
      - name: Extract Command from Comment
        id: extract_command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          COMMAND=$(echo "$COMMENT" | awk '{print $1}')
          ARGUMENT=$(echo "$COMMENT" | awk '{print $2}')

          echo "COMMAND=$COMMAND" >> $GITHUB_ENV
          echo "ARGUMENT=$ARGUMENT" >> $GITHUB_ENV
     

### ~~~~~~~~~~~~~~~~~~~~ ###
###   Start PR Pipeline  ###
### ~~~~~~~~~~~~~~~~~~~~ ###


  pr_pipeline:
    runs-on: ubuntu-latest
    needs: process-comment
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/build') &&
        !(contains(github.event.comment.body, '/build major') || 
          contains(github.event.comment.body, '/build minor') || 
          contains(github.event.comment.body, '/build patch'))
    outputs:
      image_name: "${{ steps.docker_push.outputs.image_name }}"
      image_tag: "${{ steps.docker_push.outputs.image_tag }}"
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    defaults:
      run:
        shell: sh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          #ref: ${{ github.event.client_payload.ref }}
           ref: refs/pull/${{ github.event.issue.number }}/head
                


      - id: 'Auth'
        name: 'Authenticate_to_Google_Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: 'Set_Up_Cloud_SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'  

      - name: Set up Java 18
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '18'
          
      - name: Set_Variables
        run: |
            pr_number="${{ github.event.issue.number }}"
            GIT_SHORT_HASH="0.0.0-PR-${pr_number}-$(git rev-parse --short HEAD)"
            echo "VERSION=$GIT_SHORT_HASH" >> $GITHUB_ENV
            echo "VERSION=$GIT_SHORT_HASH"
        
      - name: Echo Version
        run: |
            echo "VERSION=$VERSION"
      - name: Extract artifactId from pom.xml
        id: extract_artifact
        run: |
              ARTIFACT_ID=$(mvn help:evaluate -Dexpression=project.artifactId -q -DforceStdout)
              echo "artifact_id=$ARTIFACT_ID" >> $GITHUB_OUTPUT            
  
      - name: Build and Deploy Maven Artifact
        run: |
              echo "Setting project version to $VERSION"
              mvn versions:set -DnewVersion=$VERSION
            
              echo "Building project"
              mvn --no-transfer-progress install
            
              echo "Deploying artifact to Artifact Registry"
              mvn deploy:deploy-file \
                  -Durl=artifactregistry://us-central1-maven.pkg.dev/prodoscore-artifactory/prodoscore-java-libraries \
                  -DpomFile=pom.xml \
                  -Dfile=target/${{ steps.extract_artifact.outputs.artifact_id }}-${VERSION}.jar
            



      # - name: Pull Request data
      #   id: pr_data
      #   run: |
      #     pr_number='${{ github.event.issue.number }}'
      #     echo "pr_number=${pr_number}" >> $GITHUB_ENV
      #     cat comment.txt
      # - name: Comment PR
      #   uses: thollander/actions-comment-pull-request@v2
      #   id: hello
      #   with:
      #     filePath:  comment.txt
      #     pr_number: ${{ steps.pr_data.outputs.pr_number }}
      # - name: Repo Scanner
      #   id: repo-scanner
      #   uses: aquasecurity/trivy-action@0.28.0
      #   with:
      #     scan-type: 'fs'
      #     scan-ref: '.'
      #     severity: 'CRITICAL,HIGH'
      #     output: trivy-results.txt
      # - name: Comment Scan Results
      #   uses: actions/github-script@v7
      #   if: github.event.issue.pull_request
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const fs = require('fs');
      #       const filePath = 'trivy-results.txt';

      #       if (!context.payload.issue.pull_request) {
      #         console.log("Not a pull request comment. Skipping...");
      #         return;
      #       }

      #       const prNumber = context.payload.issue.number; // Extract PR number from issue_comment event

      #       if (fs.existsSync(filePath) && fs.statSync(filePath).size > 0) {
      #         const results = fs.readFileSync(filePath, 'utf8');
      #         const truncatedResults = results.length > 65000 ? results.substring(0, 65000) + '\n\n**Output truncated...**' : results;
              
      #         const commentBody = `### 🔍 Security Scan Results  
              
      #         <details>
      #         <summary>Click to expand scan details</summary>

      #         \`\`\`
      #         ${truncatedResults}
      #         \`\`\`

      #         </details>

      #         ⚠️ Please review the security issues before merging!`;

      #         github.rest.issues.createComment({
      #           issue_number: prNumber,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: commentBody
      #         });
      #       } else {
      #         github.rest.issues.createComment({
      #           issue_number: prNumber,
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           body: "✅ No CRITICAL or HIGH vulnerabilities found in the scan! 🎉"
      #         });
      #       }

