name: node_regular_cicd_action
on:
  workflow_call:
    inputs:
      workload_identity_provider:
        type: string
      service_account:
        type: string
      cluster_name:
        type: string
      cluster_location:
        type: string
      pr_number:
        type: string
        required: true
      ref:
        type: string
      exclude_patterns:
        description: 'File patterns to exclude (space-separated)'
        required: false
        type: string
        default: '*.png *.jpg *.jpeg *.gif *.ico *.pdf *.zip *.tar *.gz *.exe *.dll *.so *.dylib *.lock package-lock.json yarn.lock Pipfile* *.toml'

    #   BOT_USER:
    #     type: string
    #   PR_NUMBER:
    #     type: string
    # secrets:
    #   GITTOKEN:
    #     description: "Git token"
    #     required: true
    outputs:
      image_name:
        value: ${{ jobs.pr_pipeline.outputs.image_name }}
      image_tag: 
        value: ${{ jobs.pr_pipeline.outputs.image_tag }}

env:
  GIT_AUTHOR_NAME: ${{ inputs.BOT_USER }}
  PULL_BASE_REF: ${{ github.base_ref }}
  PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  PULL_PULL_REF: refs/pull/${{ github.event.pull_request.number }}/head
  PULL_PULL_SHA: ${{ github.event.pull_request.head.sha }}
  PULL_REFS: ${{ github.base_ref }}:${{ github.event.pull_request.base.sha }},${{ github.event.pull_request.number }}:${{ github.event.pull_request.head.sha }}:refs/pull/${{ github.event.pull_request.number }}/head
  JOB_NAME: "verify"
  JOB_SPEC: "type:presubmit"
  JOB_TYPE: "presubmit"
  REPO_NAME: ${{ github.event.repository.name }}
  REPO_OWNER: ${{ github.repository_owner }}
  REPO_URL: https://github.com/${{ github.repository }}.git
  JX_KUBERNETES: true
  SOURCE_DIR: "${{ github.workspace }}/source"
  OCI_REGISTRY: "oci://us-docker.pkg.dev/prodoscore-artifactory/charts/"
  REGISTRIES: "us-docker.pkg.dev"
  REPOSITORY: "prodoscore-artifactory"

jobs:
  process-comment:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/')
    
    steps:
      - name: Extract Command from Comment
        id: extract_command
        run: |
          COMMENT="${{ github.event.comment.body }}"
          COMMAND=$(echo "$COMMENT" | awk '{print $1}')
          ARGUMENT=$(echo "$COMMENT" | awk '{print $2}')

          echo "COMMAND=$COMMAND" >> $GITHUB_ENV
          echo "ARGUMENT=$ARGUMENT" >> $GITHUB_ENV
     

### ~~~~~~~~~~~~~~~~~~~~ ###
###   Start PR Pipeline  ###
### ~~~~~~~~~~~~~~~~~~~~ ###


  pr_pipeline:
    runs-on: ubuntu-latest
    needs: process-comment
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/build ') &&
        !(contains(github.event.comment.body, '/build major') || 
          contains(github.event.comment.body, '/build minor') || 
          contains(github.event.comment.body, '/build patch'))
    outputs:
      image_name: "${{ steps.docker_push.outputs.image_name }}"
      image_tag: "${{ steps.docker_push.outputs.image_tag }}"
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    defaults:
      run:
        shell: sh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          #ref: ${{ github.event.client_payload.ref }}
           ref: refs/pull/${{ github.event.issue.number }}/head
                


      - id: 'Auth'
        name: 'Authenticate_to_Google_Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: 'Set_Up_Cloud_SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: Docker_Auth
        run: |-
              #!/bin/bash
              gcloud auth configure-docker us-docker.pkg.dev
      
      - name: Get_PR_Number
        run: |
          pr_number='${{ github.event.issue.number }}'
          echo "pr_number=${pr_number}" >> $GITHUB_ENV
          echo "pr_number: ${pr_number}"

      - name: Docker_Build        
        run: |-
                    #!/bin/bash
                    pwd
                    ls -ltrh
                    git branch
                    REGISTRIES="${{env.REGISTRIES}}"
                    REPOSITORY="${{env.REPOSITORY}}"
                    GIT_SHORT_HASH="0.0.0-PR-${pr_number}-$(git rev-parse --short HEAD)"
                    # GIT_SHORT_HASH="0.0.0-$(git rev-parse --short HEAD)"
                    ROOT_DIR="$(pwd)"
                    # Define the charts directory
                    CHARTS_DIR="${ROOT_DIR}/charts"

                    # Find all subdirectories under the charts directory
                    SUBDIRS=$(find "${CHARTS_DIR}" -type d -mindepth 1 -maxdepth 1)

                    # Package each subdirectory as a Helm chart
                    for SUBDIR in ${SUBDIRS}; do
                        IMAGE_NAME=${SUBDIR##*/}

                        echo "SHA: $GIT_SHORT_HASH"
                        echo "Building Docker image ..."
                        docker build -f "Dockerfile" -t "$REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$GIT_SHORT_HASH" .

                        echo "*************************************************************"

                        docker image ls | grep -ai $REGISTRIES
                        docker image ls | grep -ai $REGISTRIES > dockertags.txt

                        # Read input from dockertags.txt
                        echo "##### Docker build details" >> comment.txt
                        echo "IMAGE | TAG | SIZE" >> comment.txt
                        echo "------ | ------ | ------ " >> comment.txt

                        while IFS= read -r line; do
                            # Use '/' as the delimiter and print the text after the 4th '/'
                            OUTPUT=$(echo "$line" | awk -F'/' '{print $(NF-0)}')
                            IMAGE=$(echo "$OUTPUT" | awk '{print $1}')
                            TAG=$(echo "$OUTPUT" | awk '{print $2}')
                            SIZE=$(echo "$OUTPUT" | awk '{print $7}')
                            # Print the result
                            echo "$IMAGE | $TAG | $SIZE" >> comment.txt
                        done < dockertags.txt
                    done
      - name: Docker_Push
        id: docker_push
        run: |
            #!/bin/bash

            # Set the desired registry
            REGISTRY="us-docker.pkg.dev"

            # Get the list of images and iterate through them
            docker image ls | grep -ai $REGISTRY | while read -r line; do
                # Extract image name, tag, and ID
                image_name=$(echo $line | awk '{print $1}')
                image_tag=$(echo $line | awk '{print $2}')
                image_id=$(echo $line | awk '{print $3}')

                # Push the image to the specified registry
                echo "Docker Push $image_name"
                docker tag $image_id $image_name:$image_tag
                docker push $image_name:$image_tag
                #echo "image_name=world" >> "$GITHUB_OUTPUT"
                # Output the image name and tag
                echo "image_name=${image_name}" >> "$GITHUB_OUTPUT"
                echo "image_tag=${image_tag}" >> "$GITHUB_OUTPUT"
                
            done
      - name: Helm_Package_And_push
        run: |
              #!/bin/bash
              helm version
              GIT_SHORT_HASH=0.0.0-PR-${pr_number}-$(git rev-parse --short HEAD)
              OCI_REGISTRY="${{env.OCI_REGISTRY}}"
              REGISTRIES="${{env.REGISTRIES}}"
              REPOSITORY="${{env.REPOSITORY}}"

              ROOT_DIR="$(pwd)"

              # Define the charts directory
              CHARTS_DIR="${ROOT_DIR}/charts"
              
              # Find all subdirectories under the charts directory
              SUBDIRS=$(find "${CHARTS_DIR}" -type d -mindepth 1 -maxdepth 1)
              
              # Package each subdirectory as a Helm chart
              for SUBDIR in ${SUBDIRS}; do
              IMAGE_NAME=${SUBDIR##*/}


                if [ -f "${SUBDIR}/Chart.yaml" ]; then
                  echo "Packaging Helm chart in ${SUBDIR}"
                  
                  #Sed image.repository
                  sed -i "s|repository: .*|repository: ${REGISTRIES}/${REPOSITORY}/images/${IMAGE_NAME}|" "${SUBDIR}/values.yaml"
                  #Sed image.tag
                  sed -i "s|tag: .*|tag: ${GIT_SHORT_HASH}|" "${SUBDIR}/values.yaml"
                  ##### 
                  helm package "${SUBDIR}" --version "${GIT_SHORT_HASH}" -d "${CHARTS_DIR}"   
                  # Index the charts
                  helm repo index "${CHARTS_DIR}" --url "${OCI_REGISTRY}"
                  helm push "${SUBDIR}-${GIT_SHORT_HASH}.tgz"  "${OCI_REGISTRY}"

                else
                  echo "Skipping ${SUBDIR} as it does not contain a valid Helm chart"
                fi
              done
              
              # # Index the charts
              # helm repo index "${CHARTS_DIR}" --url "oci://us-docker.pkg.dev/prodoscore-artifactory/charts/ "
              ls -ltrh charts 
              echo "Helm charts packaged/indexed/push successfully!"  

      - name: Pull Request data
        id: pr_data
        run: |
          pr_number='${{ github.event.issue.number }}'
          echo "pr_number=${pr_number}" >> $GITHUB_ENV
          cat comment.txt
      - name: Comment PR
        uses: thollander/actions-comment-pull-request@v2
        id: hello
        with:
          filePath:  comment.txt
          pr_number: ${{ steps.pr_data.outputs.pr_number }}
      - name: Repo Scanner
        id: repo-scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          output: trivy-results.txt
      - name: Comment Scan Results
        uses: actions/github-script@v7
        if: github.event.issue.pull_request
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const filePath = 'trivy-results.txt';

            if (!context.payload.issue.pull_request) {
              console.log("Not a pull request comment. Skipping...");
              return;
            }

            const prNumber = context.payload.issue.number; // Extract PR number from issue_comment event

            if (fs.existsSync(filePath) && fs.statSync(filePath).size > 0) {
              const results = fs.readFileSync(filePath, 'utf8');
              const truncatedResults = results.length > 65000 ? results.substring(0, 65000) + '\n\n**Output truncated...**' : results;
              
              const commentBody = `### 🔍 Security Scan Results  
              
              <details>
              <summary>Click to expand scan details</summary>

              \`\`\`
              ${truncatedResults}
              \`\`\`

              </details>

              ⚠️ Please review the security issues before merging!`;

              github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } else {
              github.rest.issues.createComment({
                issue_number: prNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "✅ No CRITICAL or HIGH vulnerabilities found in the scan! 🎉"
              });
            }
      - name: Install and setup typos
        if: github.event.issue.pull_request
        continue-on-error: true
        run: |
          #!/usr/bin/env bash
          set -eu

          # Fetch the latest release URL
          LATEST_URL=$(curl -s https://api.github.com/repos/crate-ci/typos/releases/latest \
            | grep browser_download_url \
            | grep x86_64-unknown-linux-musl.tar.gz \
            | cut -d '"' -f 4)

          # Create a temp directory
          TMP_DIR=$(mktemp -d)
          trap 'rm -rf "$TMP_DIR"' EXIT

          # Download and extract in the temp directory
          curl -LsSf "$LATEST_URL" | tar xzf - -C "$TMP_DIR"

          # Move binary to /usr/local/bin with sudo
          sudo mv "$TMP_DIR/typos" /usr/local/bin/

          # Check if custom config exists
          if [ -f ".typos.toml" ]; then
            echo "Using custom config: .typos.toml"
            cp ".typos.toml" /tmp/typos.toml
          else
            echo "No custom config found, using default settings"
            echo "[default]" > /tmp/typos.toml
          fi
      - name: Get changed lines and check typos
        if: github.event.issue.pull_request
        id: typo-check
        continue-on-error: true
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For PR: compare against target branch
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            # For push: compare against previous commit
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          echo "🔍 Checking typos in changed lines between $BASE_SHA and $HEAD_SHA"

          # Create a temporary directory for processing
          mkdir -p /tmp/typo-check

          # Initialize typo report
          FOUND_TYPOS=false

          # Get exclude patterns
          EXCLUDE_PATTERNS="${{ inputs.exclude_patterns }}"

          # Function to check if file should be excluded
          should_exclude_file() {
            local file="$1"
            for pattern in $EXCLUDE_PATTERNS; do
              case "$file" in
                $pattern)
                  return 0
                  ;;
              esac
            done
            return 1
          }

          # Process each file in the diff
          git diff --name-only $BASE_SHA..$HEAD_SHA | while read -r file; do
            if [ -f "$file" ]; then
              # Check if file should be excluded
              if should_exclude_file "$file"; then
                echo "⏭️ Skipping excluded file: $file"
                continue
              fi

              echo "📄 Processing file: $file"

              # Extract only the added lines (lines starting with +) for this file
              git diff $BASE_SHA..$HEAD_SHA --no-color --unified=0 "$file" | \
              grep "^+" | \
              grep -v "^+++" | \
              sed 's/^+//' > "/tmp/typo-check/${file//\//_}.added_lines"

              # Check if there are any added lines
              if [ -s "/tmp/typo-check/${file//\//_}.added_lines" ]; then
                echo "🔎 Checking added lines in $file..."

                # Run typos with config and capture output
                TYPO_OUTPUT=$(typos --config /tmp/typos.toml --format long "/tmp/typo-check/${file//\//_}.added_lines" 2>&1 || true)

                if [ -n "$TYPO_OUTPUT" ]; then
                  echo "❌ Typos found in $file"
                  echo "Raw typos output:"
                  echo "$TYPO_OUTPUT"

                  # Parse typos output to create formatted report
                  {
                    echo "### 📄 \`$file\`"
                    echo

                    # Process each line of typo output
                    echo "$TYPO_OUTPUT" | while IFS= read -r line; do
                    echo "Processing line: $line" >&2

                    # Handle different typos output formats
                    if [[ $line == *"error:"* ]] && [[ $line == *"should be"* ]]; then
                      # Extract components using different patterns
                      if [[ $line =~ error:\ \`([^`]+)\`\ should\ be\ \`([^`]+)\` ]]; then
                        TYPO="${BASH_REMATCH[1]}"
                        SUGGESTION="${BASH_REMATCH[2]}"
                      elif [[ $line =~ error:\ \'([^\']+)\'\ should\ be\ \'([^\']+)\' ]]; then
                        TYPO="${BASH_REMATCH[1]}"
                        SUGGESTION="${BASH_REMATCH[2]}"
                      elif [[ $line =~ ([^\ ]+)\ should\ be\ ([^\ ]+) ]]; then
                        TYPO="${BASH_REMATCH[1]}"
                        SUGGESTION="${BASH_REMATCH[2]}"
                      else
                        # Fallback: try to extract from the raw line
                        TYPO=$(echo "$line" | sed -n "s/.*error: *\([^ ]*\) should be.*/\1/p")
                        SUGGESTION=$(echo "$line" | sed -n "s/.*should be *\([^ ]*\)/\1/p")
                      fi

                      if [ -n "$TYPO" ] && [ -n "$SUGGESTION" ]; then
                        echo "### $LINE_INFO"
                        echo "**Issue:** \`$TYPO\` should be \`$SUGGESTION\`"
                      fi
                    fi
                    done

                    # If no formatted output was generated, show raw output
                    if [ ! -s /tmp/typo-check/report.md ] || ! grep -q "### " /tmp/typo-check/report.md; then
                      echo "### Raw Output"
                      echo "\`\`\`"
                      echo "$TYPO_OUTPUT"
                      echo "\`\`\`"
                      echo
                      echo "*Please review the output above and fix the highlighted issues.*"
                      echo
                    fi
                  } >> /tmp/typo-check/report.md

                  echo "FOUND_TYPOS=true" >> /tmp/typo-check/status
                else
                  echo "✅ No typos found in $file"
                fi
              else
                echo "ℹ️ No added lines to check in $file"
              fi
              echo
            fi
          done

          # Check if any typos were found and set output for next step
          if [ -f "/tmp/typo-check/status" ] && grep -q "FOUND_TYPOS=true" /tmp/typo-check/status; then
            echo "::error::Typos found in the changed lines. Please fix them before merging."
            echo "HAS_TYPOS=true" >> $GITHUB_ENV

            # Prepare the enhanced report
            {
              echo "## 📝 Spelling Issues Found"
              echo
              echo "Hey there! I found some typos in your recent changes that need fixing:"
              echo
              cat /tmp/typo-check/report.md
              echo "---"
              echo
              echo "### 🔧 How to Fix"
              echo "1. Update the misspelled words in your code"
              echo "2. Commit and push your changes"
              echo "3. This check will automatically pass once the typos are corrected"
            } > /tmp/typo-check/full_report.md

            # Make report available for next step
            echo "TYPO_REPORT<<EOF" >> $GITHUB_ENV
            cat /tmp/typo-check/full_report.md >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            exit 1
          else
            echo "✅ No typos found in any changed lines!"
            echo "HAS_TYPOS=false" >> $GITHUB_ENV
          fi
      - name: Comment on PR with typo results
        if: env.HAS_TYPOS == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            if (process.env.TYPO_REPORT) {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: process.env.TYPO_REPORT
              });
            }


### ~~~~~~~~~~~~~~~~~~~~~~~~~ ###
###   Start Release Pipeline  ###
### ~~~~~~~~~~~~~~~~~~~~~~~~~ ###


  release_pipeline:
    runs-on: ubuntu-latest
    needs: process-comment
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/build ') &&
        (contains(github.event.comment.body, '/build major') || 
          contains(github.event.comment.body, '/build minor') || 
          contains(github.event.comment.body, '/build patch'))
    outputs:
      image_name: "${{ steps.docker_push.outputs.image_name }}"
      image_tag: "${{ steps.docker_push.outputs.image_tag }}"
    permissions:
      contents: write
      id-token: write
      pull-requests: write
    defaults:
      run:
        shell: sh
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          #ref: ${{ github.event.client_payload.ref }}
           ref: refs/pull/${{ github.event.issue.number }}/head  

      - id: 'Auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ inputs.workload_identity_provider }}
          service_account: ${{ inputs.service_account }}

      - name: 'Setup Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'

      - name: Get Current Git Release
        id: get_version
        run: |
          CURRENT_VERSION=$(gh release view --json tagName --jq '.tagName' || echo "v0.0.0")
          CURRENT_VERSION="${CURRENT_VERSION#v}"  # Remove 'v' prefix if present
          echo "Current version: $CURRENT_VERSION"

          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "GIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker Auth
        run: |-
              #!/bin/bash
              gcloud auth configure-docker us-docker.pkg.dev

      - name: Tag Dev Image to GitHub Release and upload Prod Artifact Registry - Docker
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |-
          #!/bin/bash

          REGISTRIES="${{env.REGISTRIES}}"
          REPOSITORY="${{env.REPOSITORY}}"
          pr_number='${{ github.event.issue.number }}'
          GIT_SHORT_HASH="0.0.0-PR-${pr_number}-$(git rev-parse --short HEAD)"
          ROOT_DIR="$(pwd)"
          CHARTS_DIR="${ROOT_DIR}/charts"
          SUBDIRS=$(find "${CHARTS_DIR}" -type d -mindepth 1 -maxdepth 1)

          # Get github release
          CURRENT_VERSION=$(gh release view --json tagName --jq '.tagName' || echo "v0.0.0")
          echo "Current version: $CURRENT_VERSION"
          CURRENT_VERSION="${CURRENT_VERSION#v}"  # Remove 'v' prefix if present
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

          for SUBDIR in ${SUBDIRS}; do
            IMAGE_NAME=${SUBDIR##*/}
            if docker pull $REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$GIT_SHORT_HASH; then
              echo "\n\nListing Images ...\n"
              docker image ls
              
              docker tag $REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$GIT_SHORT_HASH $REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$CURRENT_VERSION-$GIT_HASH
              
              echo "\n\nListing Images After Tagging ...\n"
              docker image ls
              echo "\n\nPush Production Image to Artifact Registry ...\n"
              docker push $REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$CURRENT_VERSION-$GIT_HASH
              
              echo "\n\Copy Production Image to Artifact Registry images-prod repo...\n"
              curl -L https://github.com/google/go-containerregistry/releases/latest/download/go-containerregistry_Linux_x86_64.tar.gz -o go-containerregistry.tar.gz
              tar -zxvf go-containerregistry.tar.gz
              chmod +x gcrane
              sudo mv gcrane /usr/local/bin/
              gcrane cp $REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$CURRENT_VERSION-$GIT_HASH $REGISTRIES/$REPOSITORY/images-prod/$IMAGE_NAME:$CURRENT_VERSION-$GIT_HASH
              
              echo "#### 🚀 Release Tag: \```$CURRENT_VERSION-$GIT_HASH\```" > comment.txt 
              gh pr comment ${{ github.event.issue.number }} --repo ${{ github.repository }} --body-file comment.txt
            else
              echo "\n\nImage $REGISTRIES/$REPOSITORY/images/$IMAGE_NAME:$GIT_SHORT_HASH not found. Skipping tagging and pushing...\n"
              echo "### ❗No releases will be created.\n Before creating a GitHub Release, create an Image for lower environment and make sure your Image is QA tested." > comment.txt 
              
              gh pr comment ${{ github.event.issue.number }} --repo ${{ github.repository }} --body-file comment.txt
              gh release delete v$CURRENT_VERSION --yes
              
              exit 1
            fi
          done

      - name: Tag Dev Helm chart to GitHub Release and upload Prod Artifact Registry - Helm
        run: |
          #!/bin/bash
          OCI_REGISTRY="${{env.OCI_REGISTRY}}"
          REGISTRIES="${{env.REGISTRIES}}"
          REPOSITORY="${{env.REPOSITORY}}"

          ROOT_DIR="$(pwd)"

          # Define the charts directory
          CHARTS_DIR="${ROOT_DIR}/charts"
          
          # Find all subdirectories under the charts directory
          SUBDIRS=$(find "${CHARTS_DIR}" -type d -mindepth 1 -maxdepth 1)
          
          # Package each subdirectory as a Helm chart
          for SUBDIR in ${SUBDIRS}; do
          IMAGE_NAME=${SUBDIR##*/}


            if [ -f "${SUBDIR}/Chart.yaml" ]; then
              echo "Packaging Helm chart in ${SUBDIR}"
              
              #Sed image.repository
              sed -i "s|repository: .*|repository: ${REGISTRIES}/${REPOSITORY}/images/${IMAGE_NAME}|" "${SUBDIR}/values.yaml"
              #Sed image.tag
              sed -i "s|tag: .*|tag: $CURRENT_VERSION-$GIT_HASH|" "${SUBDIR}/values.yaml"
              ##### 
              helm package "${SUBDIR}" --version "$CURRENT_VERSION-$GIT_HASH" -d "${CHARTS_DIR}"   
              # Index the charts
              helm repo index "${CHARTS_DIR}" --url "${OCI_REGISTRY}"
              helm push "${SUBDIR}-$CURRENT_VERSION-$GIT_HASH.tgz"  "${OCI_REGISTRY}"

              echo "\n\Copy Production Helm chart to Artifact Registry charts-prod repo...\n"
              gcrane cp $REGISTRIES/$REPOSITORY/charts/$IMAGE_NAME:$CURRENT_VERSION-$GIT_HASH $REGISTRIES/$REPOSITORY/charts-prod/$IMAGE_NAME:$CURRENT_VERSION-$GIT_HASH

            else
              echo "Skipping ${SUBDIR} as it does not contain a valid Helm chart"
            fi
          done
      
